name: release CI, CD workflow 
on: 
  push:
    branches: [ "release"]
  pull_request:
    branches: [ "release"]
jobs:
  build:
    runs-on: ubuntu-latest
    name: Run unit tests and SAST scan on the source code 
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: npm
    - run: npm install
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=johan-ortega118
          -Dsonar.projectKey=Johan-Ortega118_holamundoReact
  security:
    runs-on: ubuntu-latest
    needs: build
    name: Run the SCA scan on the source code
    steps:
      - uses: actions/checkout@master
      - name: RunSnyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  zap_scan:
    runs-on: ubuntu-latest
    needs: security
    name: Run DAST scan on the web application
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: release
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://example.com/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
  release:
    runs-on: ubuntu-latest
    needs: zap_scan
    name: Despliegue
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: CI
        run: npm ci
      - name: Test
        run: |
          npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      - name: make .env 
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_NG_APP_KEY : ${{ secrets.OPENAI_KEY }}
          file_name: .env
          fail_on_empty: false
          
      - name: build angular, output in dist/openai
        run: |
          npm run build
      
      - name: show dir, .env file
        run: |
          ls -la 
          
      - name: download, run httpd image, container name serving_base
        run: |
          docker run -d --name serving_base httpd
          
      - name: cp angular build to container
        run: |
          docker cp build/.  serving_base:/usr/local/apache2/htdocs
          
      - name: Build the custom Docker image
        run: docker commit --change "ENV MODEL_NAME ${{secrets.MODEL_NAME}}" serving_base ${{secrets.DOCKER_USER}}/${{secrets.MODEL_NAME}}:${{github.sha}}

      - name: show docker images
        run: docker images

      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
          
      - name: Docker Push
        run: docker push ${{secrets.DOCKER_USER}}/${{secrets.MODEL_NAME}}:${{github.sha}}
      
      - name: update docker user in k8 
        run: sed -i 's/{docker_user}/${{secrets.DOCKER_USER}}/g' manifests/k8s.yaml

      - name: update model name in k8 
        run: sed -i 's/{model_name}/${{secrets.MODEL_NAME}}/g' manifests/k8s.yaml

      - name: update _ by - 
        run: sed -i 's/_/-/g' manifests/k8s.yaml

      - name: update sha in k8
        run: sed -i 's/{github.sha}/${{github.sha}}/g' manifests/k8s.yaml

      - name: ls -la 
        run: cat manifests/k8s.yaml
      - uses: okteto/context@2.7.0
        with:
          token: ${{secrets.OKTETO_TOKEN }}
# 
      - name: Deploy and Wait
        uses: okteto/actions/deploy@v1
        env:
          KUBECONFIG: ${{ steps.namespace.outputs.kubeconfig }}
        with:
          namespace: ${{secrets.OKTETO_NAMESPACE }}
          manifest: manifests/k8s.yaml
          tag: ${{ secrets.DOCKER_USERNAME }}/${{secrets.MODEL_NAME}}:${{github.sha}}
